---
title: "**Flattening the Nextflow learning curve**"
image: ../figs/Nextflow.png
---

Workflow frameworks, like Nextflow, have recently emerged as solutions to the challenges posed by bioinformatics pipelines. Bioinformatics data processing typically comprises many individual steps that accept and output varying file formats, and require the use of multiple coding languages and pieces of software. While Nextflow offers a nice solution for creating reproducible, portable workflows that are easy to run, it comes at the cost of a steep learning curve. Nextflow's users need to learn yet another Domain-Specific Language (DSL) and a new and foreign programming paradigm in order to get the most out of it. 

As a part of the Australian BioCommons [Bring Your Own Data platforms project](https://www.biocommons.org.au/byo-data-platform-expansion), we focused on Nextflow over other workflow frameworks in our workflow development activities, developer support, and training programme due to its growing popularity in the community. The outcomes of this work includes: 

* My participation in [round 3 of the nf-core mentorship programme](https://www.nextflow.io/blog/2023/czi-mentorship-round-3.html) 
* The development of institutional configuration files for Australian national HPC infrastructure ([Gadi](https://nf-co.re/configs/nci_gadi), [Setonix](https://nf-co.re/configs/pawsey_setonix), [Nimbus](https://nf-co.re/configs/pawsey_nimbus))
* The delivery of a national online workshop focused on [customising nf-core workflows](https://www.biocommons.org.au/events/custom-nfcore) in partnership with Seqera Labs
* The development of a simple [Nextflow workflow template](https://github.com/Sydney-Informatics-Hub/template-nf)
* The ongoing development of an automated [configuration builder tool](https://github.com/georgiesamaha/configBuilder-nf)
